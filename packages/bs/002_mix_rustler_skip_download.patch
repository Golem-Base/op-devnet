diff --git a/lib/rustler_precompiled.ex b/lib/rustler_precompiled.ex
index d3dad0b..6c1a11f 100644
--- a/lib/rustler_precompiled.ex
+++ b/lib/rustler_precompiled.ex
@@ -719,49 +719,70 @@ defmodule RustlerPrecompiled do
     native_dir = Application.app_dir(name, @native_dir)

     lib_name = Map.fetch!(metadata, :lib_name)
-    cached_tar_gz = Map.fetch!(metadata, :cached_tar_gz)
-    cache_dir = Path.dirname(cached_tar_gz)
+    dirname = Path.dirname(Path.join(native_dir, Map.fetch!(metadata, :file_name)))

-    file_name = Map.fetch!(metadata, :file_name)
-    lib_file = Path.join(native_dir, file_name)
-
-    base_url = config.base_url
-    nif_module = config.module
+    # Ensure the directory exists
+    File.mkdir_p(dirname)

+    # Skip all download logic, just return OK
     result = %{
       load?: true,
       load_from: {name, Path.join("priv/native", lib_name)},
       load_data: config.load_data
     }

-    if File.exists?(cached_tar_gz) do
-      # Remove existing NIF file so we don't have processes using it.
-      # See: https://github.com/rusterlium/rustler/blob/46494d261cbedd3c798f584459e42ab7ee6ea1f4/rustler_mix/lib/rustler/compiler.ex#L134
-      File.rm(lib_file)
-
-      with :ok <- check_file_integrity(cached_tar_gz, nif_module),
-           :ok <- :erl_tar.extract(cached_tar_gz, [:compressed, cwd: Path.dirname(lib_file)]) do
-        Logger.debug("Copying NIF from cache and extracting to #{lib_file}")
-        {:ok, result}
-      end
-    else
-      dirname = Path.dirname(lib_file)
-      tar_gz_url = tar_gz_file_url(base_url, lib_name_with_ext(cached_tar_gz, lib_name))
-
-      with :ok <- File.mkdir_p(cache_dir),
-           :ok <- File.mkdir_p(dirname),
-           {:ok, tar_gz} <-
-             with_retry(fn -> download_nif_artifact(tar_gz_url) end, config.max_retries),
-           :ok <- File.write(cached_tar_gz, tar_gz),
-           :ok <- check_file_integrity(cached_tar_gz, nif_module),
-           :ok <-
-             :erl_tar.extract({:binary, tar_gz}, [:compressed, cwd: Path.dirname(lib_file)]) do
-        Logger.debug("NIF cached at #{cached_tar_gz} and extracted to #{lib_file}")
-
-        {:ok, result}
-      end
-    end
+    Logger.debug("Skipping NIF download, will rely on manually linked NIFs")
+    {:ok, result}
   end
+  # def download_or_reuse_nif_file(%Config{} = config, metadata) when is_map(metadata) do
+  #   name = config.otp_app
+
+  #   native_dir = Application.app_dir(name, @native_dir)
+
+  #   lib_name = Map.fetch!(metadata, :lib_name)
+  #   cached_tar_gz = Map.fetch!(metadata, :cached_tar_gz)
+  #   cache_dir = Path.dirname(cached_tar_gz)
+
+  #   file_name = Map.fetch!(metadata, :file_name)
+  #   lib_file = Path.join(native_dir, file_name)
+
+  #   base_url = config.base_url
+  #   nif_module = config.module
+
+  #   result = %{
+  #     load?: true,
+  #     load_from: {name, Path.join("priv/native", lib_name)},
+  #     load_data: config.load_data
+  #   }
+
+  #   if File.exists?(cached_tar_gz) do
+  #     # Remove existing NIF file so we don't have processes using it.
+  #     # See: https://github.com/rusterlium/rustler/blob/46494d261cbedd3c798f584459e42ab7ee6ea1f4/rustler_mix/lib/rustler/compiler.ex#L134
+  #     File.rm(lib_file)
+
+  #     with :ok <- check_file_integrity(cached_tar_gz, nif_module),
+  #          :ok <- :erl_tar.extract(cached_tar_gz, [:compressed, cwd: Path.dirname(lib_file)]) do
+  #       Logger.debug("Copying NIF from cache and extracting to #{lib_file}")
+  #       {:ok, result}
+  #     end
+  #   else
+  #     dirname = Path.dirname(lib_file)
+  #     tar_gz_url = tar_gz_file_url(base_url, lib_name_with_ext(cached_tar_gz, lib_name))
+
+  #     with :ok <- File.mkdir_p(cache_dir),
+  #          :ok <- File.mkdir_p(dirname),
+  #          {:ok, tar_gz} <-
+  #            with_retry(fn -> download_nif_artifact(tar_gz_url) end, config.max_retries),
+  #          :ok <- File.write(cached_tar_gz, tar_gz),
+  #          :ok <- check_file_integrity(cached_tar_gz, nif_module),
+  #          :ok <-
+  #            :erl_tar.extract({:binary, tar_gz}, [:compressed, cwd: Path.dirname(lib_file)]) do
+  #       Logger.debug("NIF cached at #{cached_tar_gz} and extracted to #{lib_file}")
+
+  #       {:ok, result}
+  #     end
+  #   end
+  # end

   defp checksum_map(nif_module) when is_atom(nif_module) do
     nif_module
